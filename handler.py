

import logging

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
import json
import hashlib
import os

logger = logging.getLogger(__name__)

TOKEN = os.environ.get('TG_TOKEN')
if not TOKEN:
    print('TG_TOKEN not specified in env, please set TG_TOKEN with your bot token generated by @BotFather')
    exit(1)

def button_click(update, context):
    query = update.callback_query

    if query.data.startswith('toggle__'):
        hash = query.data.replace('toggle__', '')

        for i, btn in enumerate(query.message.reply_markup.inline_keyboard):
            checked = btn[0].text.startswith('☑️')
            btn_text = btn[0].text.replace('🟨 ', '').replace('☑️ ', '')
            if md5hash(
                f'{btn_text}_{i}'
            ) == hash:
                print('found a btn', btn_text)
                new_text = f'☑️ {btn_text}' if not checked else f'🟨 {btn_text}'
                btn[0].text = new_text
                break

        context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=f'Click to toggle',
            reply_markup=query.message.reply_markup
        )
       


def md5hash(text):
    return hashlib.md5(text.encode('utf-8')).hexdigest()



def echo(update: Update, context: CallbackContext) -> None:
    """
    This function would be added to the dispatcher as a handler for messages coming from the Bot API
    """

    print('upd 🟨', update)
    if not update.channel_post and not update.message.text:
        return
    
    msg = update.channel_post.text if update.channel_post else update.message.text
    print('msg', msg)
    # Print to console

    lines = msg.split('\n')
    keyboard = []

    index = 0
    for line in lines:
        if line.strip() == '':
            continue
        keyboard.append([InlineKeyboardButton(
            f"🟨 {line}", 
            callback_data=f"toggle__{md5hash(f'{line}_{index}')}"
        )])
        index += 1


    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.channel_post:
        update.channel_post.reply_text('Click to toggle', reply_markup=reply_markup)
    else:
        update.message.reply_text('Click to toggle', reply_markup=reply_markup)



def main() -> None:
    updater = Updater(TOKEN)

    # Get the dispatcher to register handlers
    # Then, we register each handler and the conditions the update must meet to trigger it
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CallbackQueryHandler(button_click))


    # Echo any message that is not a command
    dispatcher.add_handler(MessageHandler(~Filters.command, echo))

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C
    updater.idle()


if __name__ == '__main__':
    main()
